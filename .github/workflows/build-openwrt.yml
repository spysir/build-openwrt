# https://github.com/P3TERX/Actions-OpenWrt.git


name: 编译OpenWrt固件

on:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH连接'
        required: false
        default: 'ssh-off'
      

#开启SSH:在Run Workflow时把SSH connection to Actions的值改为SSH即可开启SSH链接,默认为关闭SSH
#定时触发开始编译(开启定时编译请先确认SSH处在关闭状态,要不然SSH没人管,会卡SSH编译失败)
#  schedule:
#    - cron: 0 8 */5 * *


#点☆Star触发开始编译
  watch:
    types: started


env: 
  REPO_TOKEN: ${{ secrets.REPO_TOKEN }}
  SCKEY: ${{ secrets.SCKEY }}
  TZ: Asia/Shanghai
  

jobs: 
  build:
    runs-on: Ubuntu-20.04
    if: github.event.repository.owner.id == github.event.sender.id

    name: 编译 ${{matrix.target}}
    strategy:
      fail-fast: false
      matrix:
        target: [Lede_x86_64]
     # 选择要编译的固件[Lienol_x86_64,Lede_x86_64,Lede_redmi_ac2100,Lede_xiaomi_ac2100]
    

    steps:
    - name: 准备结束
      uses: actions/checkout@v2
    
    - name: 检测脚本设置
      run: |
        source "${GITHUB_WORKSPACE}/build/${{matrix.target}}/settings.ini"
        echo "REPO_URL=${REPO_URL}" >> $GITHUB_ENV
        echo "REPO_BRANCH=${REPO_BRANCH}" >> $GITHUB_ENV
        echo "CONFIG_FILE=${CONFIG_FILE}" >> $GITHUB_ENV
        echo "WXFB_MESSAGE=${WXFB_MESSAGE}" >> $GITHUB_ENV
        echo "DIY_P1_SH=${DIY_P1_SH}" >> $GITHUB_ENV
        echo "DIY_P2_SH=${DIY_P2_SH}" >> $GITHUB_ENV
        echo "SSH_ACTIONS=${SSH_ACTIONS}" >> $GITHUB_ENV
        echo "UPLOAD_BIN_DIR=${UPLOAD_BIN_DIR}" >> $GITHUB_ENV
        echo "UPLOAD_CONFIG=${UPLOAD_CONFIG}" >> $GITHUB_ENV
        echo "UPLOAD_FIRMWARE=${UPLOAD_FIRMWARE}" >> $GITHUB_ENV
        echo "UPLOAD_COWTRANSFER=${UPLOAD_COWTRANSFER}" >> $GITHUB_ENV
        echo "UPLOAD_RELEASE=${UPLOAD_RELEASE}" >> $GITHUB_ENV
        echo "SERVERCHAN_SCKEY=${SERVERCHAN_SCKEY}" >> $GITHUB_ENV
    
    
    
    - name: 安装编译环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update -y
        sudo -E apt-get -qq install -y build-essential asciidoc binutils bzip2 gawk gettext git libc6-dev libncurses5 libtinfo-dev libtinfo5 ncurses-doc libncurses5-dev libz-dev patch python3 python2.7 unzip zlib1g-dev lib32gcc1 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler g++-multilib antlr3 gperf wget curl swig rsync
        sudo -E apt-get -qq autoremove -y --purge
        sudo -E apt-get -qq clean -y
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: 下载${{matrix.target}}源码
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone -b $REPO_BRANCH --single-branch $REPO_URL openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
        cd openwrt
        if [ build/${{matrix.target}} != build/openwrt ]; then
          rm -rf package/lean/luci-app-netdata
          rm -rf package/lean/luci-theme-argon
          rm -rf package/lean/k3screenctrl
          rm -rf package/diy/OpenAppFilter
        
        fi
          
        

    - name: 加载源和自定义设置
      run: |
        cp -Rf `find ./ -maxdepth 1 -type d ! -path './openwrt' ! -path './'` openwrt
        cd openwrt
        if [ -f "build/${{matrix.target}}/$DIY_P1_SH" ]; then
          chmod +x build/${{matrix.target}}/$DIY_P1_SH
          /bin/bash "build/${{matrix.target}}/$DIY_P1_SH"
        fi
        
        ./scripts/feeds clean && ./scripts/feeds update -a && ./scripts/feeds install -a && ./scripts/feeds install -a
        
        if [ -f "build/${{matrix.target}}/$DIY_P2_SH" ]; then
          chmod +x build/${{matrix.target}}/$DIY_P2_SH
          /bin/bash "build/${{matrix.target}}/$DIY_P2_SH"
        fi
        if [ -n "$(ls -A "build/${{matrix.target}}/patches" 2>/dev/null)" ]; then
          find "build/${{matrix.target}}/patches" -type f -name '*.patch' -print0 | sort -z | xargs -I % -t -0 -n 1 sh -c "cat '%'  | patch -d './' -p1 --forward --no-backup-if-mismatch"
        fi
        if [ -n "$(ls -A "build/${{matrix.target}}/files" 2>/dev/null)" ]; then
         cp -rf build/${{matrix.target}}/files files
         chmod -R 755 build/${{matrix.target}}/files/* ./
        fi
        if [ -n "$(ls -A "build/${{matrix.target}}/diy" 2>/dev/null)" ]; then
         cp -Rf build/${{matrix.target}}/diy/* ./
        fi
        [ -e build/${{matrix.target}}/$CONFIG_FILE ]
        mv build/${{matrix.target}}/$CONFIG_FILE .config
        make defconfig
        git clone https://github.com/openwrt-dev/po2lmo.git
        pushd po2lmo
        make && sudo make install
        popd
 
    - name: SSH连接（如代码未展开请刷新）
      uses: spysir/debugger-action@master
      if: env.SSH_ACTIONS == 'true' || (github.event.inputs.ssh == 'ssh' && github.event.inputs.ssh  != 'false')

    - name: 下载软件包
      id: package
      run: |
        cd openwrt
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
    
    - name: 电报推送
      uses: spysir/telegram-action@master
      with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
                 ${{matrix.target}}固件开始编译啦！
    
    - name: 开始编译
      id: compile
      run: |
        cd openwrt
        echo -e "$(($(nproc)+1)) thread compile"
        make -j$(($(nproc)+1)) || make -j1 V=s
        echo "::set-output name=status::success"
        echo "date=$(date "+%Y-%m-%d %H.%M")" >> $GITHUB_ENV
        echo "date1=$(date "+%Y年%m月%d号-%H点%M分")" >> $GITHUB_ENV
        echo "date2=$(date "+%Y%m%d-%H%M")" >> $GITHUB_ENV

    - name: 上传bin文件夹
      uses: actions/upload-artifact@v2
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin_${{matrix.target}}_${{ env.date }}
        path: openwrt/bin

    - name: 整理固件
      id: organizer
      run: |
        mkdir config
        find openwrt/bin/targets/ -name "*config.buildinfo*" | xargs -i mv -f {} config
        cd openwrt/bin/targets/*/*
        rm -rf packages && mkdir packages
        find -name "*buildinfo*" | xargs -i mv -f {} packages
        find -name "*sha256sums*" | xargs -i mv -f {} packages
        find -name "*kernel.bin*" | xargs -i mv -f {} packages
        find -name "*kernel1.bin*" | xargs -i mv -f {} packages
        find -name "*manifest*" | xargs -i mv -f {} packages
        find -name "*vmlinuz*" | xargs -i mv -f {} packages
        find -name "*esxi.vmdk*" | xargs -i mv -f {} packages
        find -name "*Image*" | xargs -i mv -f {} packages
        find -name "*rootfs-squashfs*" | xargs -i mv -f {} packages
        find -name "*squashfs-rootfs*" | xargs -i mv -f {} packages
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "::set-output name=status::success"
    
    - name: 上传.config文件
      uses: actions/upload-artifact@v2
      if: steps.organizer.outputs.status == 'success' && env.UPLOAD_CONFIG == 'true'
      with:
        name: .config_${{matrix.target}}_${{ env.date }}
        path: ./config

    - name: 上传固件
      uses: actions/upload-artifact@v2
      if: steps.organizer.outputs.status == 'success' && env.UPLOAD_FIRMWARE == 'true'
      with:
        name: OpenWrt_firmware_${{matrix.target}}_${{ env.date }}
        path: ${{ env.FIRMWARE }}

    - name: 电报推送
      uses: spysir/telegram-action@master
      if: steps.organizer.outputs.status == 'success'
      with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
                 ${{matrix.target}}固件编译成功啦! (*^_^*)(*^_^*)(*^_^*)(*^_^*)(*^_^*)(*^_^*)(*^_^*)(*^_^*)(*^_^*)(*^_^*)(*^_^*)
